import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.3'
	id 'io.spring.dependency-management' version '1.1.4'
	id "org.openapi.generator" version "6.2.1"
	id 'groovy'
	id 'jacoco'
	id("io.swagger.core.v3.swagger-gradle-plugin") version "2.2.21"
	id "com.google.protobuf" version "0.9.3"
}
apply plugin: 'org.openapi.generator'

group = 'com.sadrax'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '21'
}
ext {
	set('mapstructVersion', '1.5.5.Final')
	set('spockVersion', "2.3-groovy-4.0")
	set('groovyVersion', '4.0.20')
	set('hazelcastVersion', '3.12.10')
	set('wiremockVersion', '2.35.0')
	set('archUnitVersion', "1.0.1")
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenLocal()
	mavenCentral()
	maven {
		url 'https://repo1.maven.org/maven2'
		allowInsecureProtocol = true
	}
}

dependencies {
	// Spring Boot starters
	implementation 'org.springframework.boot:spring-boot-starter-amqp'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-quartz'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-configuration-processor'

	// Liquibase
	implementation 'org.liquibase:liquibase-core'

	// Kafka
	implementation 'org.springframework.kafka:spring-kafka'

	// Protobuf
	implementation "com.google.protobuf:protobuf-java:3.22.4"
	testImplementation "com.google.protobuf:protobuf-java:3.22.4"

	// OpenAPI
	implementation 'org.openapitools:jackson-databind-nullable:0.2.2'
	implementation "io.swagger.core.v3:swagger-annotations:2.1.10"

	// MapStruct
	implementation "org.mapstruct:mapstruct:${mapstructVersion}"
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
	annotationProcessor "org.projectlombok:lombok-mapstruct-binding:0.2.0"

	// Hazelcast
	implementation "com.hazelcast:hazelcast:${hazelcastVersion}"
	implementation "com.hazelcast:hazelcast-spring:${hazelcastVersion}"
	implementation "com.hazelcast:hazelcast-client:${hazelcastVersion}"
	testImplementation "com.hazelcast:hazelcast:${hazelcastVersion}:tests"

	// Validation
	implementation 'javax.validation:validation-api:2.0.1.Final'

	// Annotations
	implementation 'javax.annotation:javax.annotation-api:1.3.2'

	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// Servlet
	compileOnly 'javax.servlet:servlet-api:2.5'

	// Database drivers
	runtimeOnly 'com.oracle.database.jdbc:ojdbc11'
	runtimeOnly 'org.postgresql:postgresql'

	// Jakarta Persistence
	implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api:3.1.0'

	// Development
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	// Test dependencies
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.amqp:spring-rabbit-test'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:kafka'
	testImplementation "org.testcontainers:postgresql"
	testImplementation "org.apache.groovy:groovy:${groovyVersion}"
	testImplementation "org.apache.groovy:groovy-json:${groovyVersion}"
	testImplementation "org.spockframework:spock-core:${spockVersion}"
	testImplementation "org.spockframework:spock-spring:${spockVersion}"
	testImplementation "com.github.tomakehurst:wiremock-jre8:${wiremockVersion}"
	testImplementation "com.tngtech.archunit:archunit:${archUnitVersion}"
	testImplementation "com.tngtech.archunit:archunit-junit5:${archUnitVersion}"
}

protobuf {
	protoc {
		artifact = "com.google.protobuf:protoc:3.22.4"
	}
}

processResources {
	from "${rootDir}/db-schema/src/main/resources"
}

test {
	filter {
		excludeTestsMatching "IT*"
	}
	environment "executeIT", "false"
	useJUnitPlatform()
}

task testIT(type: Test) {
	group = "verification"
	filter {
		includeTestsMatching "IT*"
	}
	environment "executeIT", "true"
	useJUnitPlatform()
}

task testAll(type: Test) {
	filter {
		includeTestsMatching "*"
	}
	group = "verification"
	environment "executeIT", "true"
	useJUnitPlatform()
}

def apiModels = new FileNameFinder().getFileNames("$projectDir/src/main/resources/api", '*.api.yml', 'common.api.yml').collect {
	def modelFileName = new File(it).getName()
	return modelFileName.substring(0, modelFileName.length() - ".api.yml".length())
}

static String toCamelCase(String text, boolean capitalized = false) {
	text = text.replaceAll("(_)([A-Za-z0-9])", { Object[] it -> it[2].toUpperCase() })
	return capitalized ? text.capitalize() : text
}

static String toPackagePart(String text, boolean capitalized = false) {
	text = text.replaceAll("_", "")
	return capitalized ? text.capitalize() : text
}

apiModels.forEach { model ->
	tasks.register("api${toCamelCase(model, true)}", GenerateTask) {
		generatorName = "spring"
		inputSpec = "$projectDir/src/main/resources/api/${model}.api.yml".toString()
		outputDir = "$buildDir/generated".toString()
		modelPackage = "com.sadrax.application.${toPackagePart(model, false)}.rto"
		apiPackage = "com.sadrax.application.${toPackagePart(model, false)}.api"
		modelNameSuffix = "RTO"
		templateDir = "$projectDir/src/main/resources/api/templates".toString()
		typeMappings = ["instant-date-time": 'java.time.Instant']
		configOptions = [
				dateLibrary                   : "java8-localdatetime",
				library                       : "spring-boot",
				documentationProvider         : "springDoc",
				interfaceOnly                 : "true",
				additionalModelTypeAnnotations: "@Builder @NoArgsConstructor @AllArgsConstructor",
				useTags                       : "false",
				skipDefaultInterface          : "false"]
	}
}

task apiAll { it ->
	{
		apiModels.forEach { model ->
			it.dependsOn "api${toCamelCase(model, true)}"
			processResources.dependsOn(it)
		}
	}
}

compileJava {
	options.compilerArgs += [
			'-Amapstruct.defaultComponentModel=spring',
	]
}
compileJava.dependsOn tasks.apiAll

springBoot {
	buildInfo()
}

sourceSets.main.java.srcDir "${buildDir}/generated/src/main/java"
sourceSets.main.resources.srcDir "${buildDir}/generated/src/main/resources"