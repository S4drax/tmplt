package com.sadrax.tmplt.infrastructure.entity.generated;
// Generated by Hibernate Tools 5.6.15.Final


import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Set;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import org.hibernate.annotations.GenericGenerator;

import java.util.UUID;
import jakarta.persistence.*;
import lombok.Builder;
import lombok.AllArgsConstructor;
import lombok.NoArgsConstructor;
import lombok.Data;

    /**
 * ClientsEntity generated by hbm2java
*/
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Data
@Entity
@Table(name="clients"
)
public class ClientsEntity  implements java.io.Serializable {


     private UUID clientId;
     private AddressesEntity addressesEntityByAddressId;
     private AddressesEntity addressesEntityByBillingAddressId;
     private String firstName;
     private String lastName;
     private String email;
     private String createUser;
     private LocalDateTime createDate;
     private String updateUser;
     private LocalDateTime updateDate;
     @Builder.Default private Set<TransactionsEntity> transactionsEntities = new HashSet<TransactionsEntity>(0);

     @GenericGenerator(name="com.sadrax.tmplt.infrastructure.entity.generated.ClientsEntityIdGenerator", strategy="org.hibernate.id.UUIDGenerator")@Id @GeneratedValue(generator="com.sadrax.tmplt.infrastructure.entity.generated.ClientsEntityIdGenerator")

    
    @Column(name="client_id", unique=true, nullable=false)
    public UUID getClientId() {
        return this.clientId;
    }
    
    public void setClientId(UUID clientId) {
        this.clientId = clientId;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="address_id")
    public AddressesEntity getAddressesEntityByAddressId() {
        return this.addressesEntityByAddressId;
    }
    
    public void setAddressesEntityByAddressId(AddressesEntity addressesEntityByAddressId) {
        this.addressesEntityByAddressId = addressesEntityByAddressId;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="billing_address_id")
    public AddressesEntity getAddressesEntityByBillingAddressId() {
        return this.addressesEntityByBillingAddressId;
    }
    
    public void setAddressesEntityByBillingAddressId(AddressesEntity addressesEntityByBillingAddressId) {
        this.addressesEntityByBillingAddressId = addressesEntityByBillingAddressId;
    }

    
    @Column(name="first_name", length=50)
    public String getFirstName() {
        return this.firstName;
    }
    
    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    
    @Column(name="last_name", length=50)
    public String getLastName() {
        return this.lastName;
    }
    
    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    
    @Column(name="email", length=50)
    public String getEmail() {
        return this.email;
    }
    
    public void setEmail(String email) {
        this.email = email;
    }

    
    @Column(name="create_user", nullable=false, length=30)
    public String getCreateUser() {
        return this.createUser;
    }
    
    public void setCreateUser(String createUser) {
        this.createUser = createUser;
    }

    
    @Column(name="create_date", nullable=false, length=29)
    public LocalDateTime getCreateDate() {
        return this.createDate;
    }
    
    public void setCreateDate(LocalDateTime createDate) {
        this.createDate = createDate;
    }

    
    @Column(name="update_user", length=30)
    public String getUpdateUser() {
        return this.updateUser;
    }
    
    public void setUpdateUser(String updateUser) {
        this.updateUser = updateUser;
    }

    
    @Column(name="update_date", length=29)
    public LocalDateTime getUpdateDate() {
        return this.updateDate;
    }
    
    public void setUpdateDate(LocalDateTime updateDate) {
        this.updateDate = updateDate;
    }

@OneToMany(cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REFRESH}, fetch=FetchType.LAZY, mappedBy="clientsEntity")
    public Set<TransactionsEntity> getTransactionsEntities() {
        return this.transactionsEntities;
    }
    
    public void setTransactionsEntities(Set<TransactionsEntity> transactionsEntities) {
        this.transactionsEntities = transactionsEntities;
    }




  }


